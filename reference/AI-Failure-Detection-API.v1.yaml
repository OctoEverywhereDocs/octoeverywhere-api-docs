openapi: 3.0.0
x-stoplight:
  id: akb7f5psdzhz7
info:
  title: AI Failure Detection APIs
  version: '1.0'
  description: 'API definitions. For a detailed explanation, [see the API overview.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is)'
servers: []
paths:
  /api/gadget/v1/createcontext:
    parameters: []
    servers:
      - url: 'https://gadget-pv1-oeapi.octoeverywhere.com'
        description: ''
    post:
      summary: Create Context
      tags: []
      responses:
        '400':
          description: "If the API doesn't return a 200, it will return an HTTP error code with a common json error object body.\r\n\r\n**Note that many different HTTP error codes can be returned; they will all contain the json error body described here.**\r\n\r\nThe json body contains `ErrorType` and `ErrorDetails`. `ErrorType` is a well known string that will map to an [Error Type detailed here.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is#errors) The `ErrorDetails` will provide details about the error."
          content:
            application/json:
              schema:
                type: object
                required:
                  - ErrorType
                  - ErrorDetails
                properties:
                  ErrorType:
                    type: string
                    x-stoplight:
                      id: nednafncfw7l7
                    description: '        A well known [Error Type detailed here.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is#errors)'
                  ErrorDetails:
                    type: string
                    x-stoplight:
                      id: tf4oe5c08j4h2
                    description: '        Details about this specific error.'
        2XX:
          description: A context was successfully created.
          content:
            application/json:
              schema:
                type: object
                required:
                  - ContextId
                  - ProcessRequestUrl
                  - FallbackProcessRequestUrl
                properties:
                  ContextId:
                    type: string
                    x-stoplight:
                      id: sygaiedhz7i6m
                    description: '        The ID of the new context.'
                    example: uYZkEP0g22nPZwtCj6ASWef9Lpmh81Ahs1mnAdw4Z7PlDFbOK6
                  ProcessRequestUrl:
                    type: string
                    x-stoplight:
                      id: oyrkf6qw3d08g
                    description: '        This is the main URL that should be used for all Process API requests for the lifetime of this context.'
                    example: 'https://gadget-reional-subdomain.octoeverywhere.com/api/gadget/v1/process/uYZkEP0g22nPZwtCj6ASWef9Lpmh81Ahs1mnAdw4Z7PlDFbOK6'
                  FallbackProcessRequestUrl:
                    type: string
                    x-stoplight:
                      id: seqynqf1gba3v
                    description: "    This is the fallback URL that can be used if the `ProcessRequestUrl` fails for any reason. \r\n    Once the application swtiches to the `FallbackProcessRequestUrl` it should continue to use it for the lifetime of the context."
                    example: 'https://gadget-pv1-oeapi.octoeverywhere.com/api/gadget/v1/process/uYZkEP0g22nPZwtCj6ASWef9Lpmh81Ahs1mnAdw4Z7PlDFbOK6'
      operationId: create-context
      x-stoplight:
        id: kgomtjwkt3dj9
      description: "The Create Context API creates a new context for AI failure detection session. The lifetime of a context is a single print, each new print should create a new context. The context does not need to be destroyed; it will auto-delete after 14 days.\r\n\r\nThis API should always be called with the primary hostname `gadget-pv1-oeapi.octoeverywhere.com`. Ex: `https://gadget-pv1-oeapi.octoeverywhere.com/api/gadget/v1/createcontex`\r\n\r\n\r\nThe optional `WarningConfidenceLevel` and `PauseConfidenceLevel` parameters adjust how confident temporal combination model needs to be before invoking the warning or pause suggestion.The default value is 3 if unset. A lower value will mean the model will be less confident when it sends the warning or pause suggestion, which might catch more issues but also could make false-positive suggestions more often. A higher value makes the model more confident before it issues the suggestion, which means it might miss minor print failure but be far less likely to make a false-positive suggestion.\r\n\r\n\r\nThe json response contains the context id and two URLs, `ProcessRequestUrl` and `FallbackProcessRequestUrl`. The `ProcessRequestUrl` URL is the full URL your program should use for [Process API](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/ck1qrradzvhim-process-api) calls for the lifetime of this context. If the `ProcessRequestUrl` fails, your program should fall back to the `FallbackProcessRequestUrl` URL and use it for the remaining lifetime of the context.\r\n\r\n[Read this doc for a full API overview.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is)\r\n\r\n"
      parameters:
        - schema:
            type: string
          in: header
          name: X-API-Key
          description: You OctoEverywhere developer API key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                WarningConfidenceLevel:
                  type: integer
                  x-stoplight:
                    id: mfrfza945tj5d
                  minimum: 1
                  maximum: 5
                  description: "```json\r\nOptional Parameter\r\nThis adjusts the temporal combination model's required confidence in a failure to trigger the warning suggestion.\r\nThe value must be between 1-5, where 1 is the least confident (more warnings) and 5 is the most confident (less warnings).\r\nIf not set, the default value of 3 will be used.\r\n```"
                  default: 3
                PauseConfidenceLevel:
                  type: integer
                  x-stoplight:
                    id: wy1w2uz7at298
                  minimum: 1
                  maximum: 5
                  default: 3
                  description: "            Optional Parameter\r\n            This adjusts the temporal combination model's required confidence in a failure to trigger the pause print suggestion.\r\n            The value must be between 1-5, where 1 is the least confident (will pause with less confidence) and 5 is the most confident (will only pause when very confident).\r\n            If not set, the default value of 3 will be used."
  '/api/gadget/v1/process/{ID}':
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
      - schema:
          type: string
        name: ID
        in: path
        required: true
        description: The context id.
      - schema:
          type: string
        name: ''
        in: path
        required: true
    servers:
      - url: ' https://<your primary process url>.octoeverywhere.com'
        description: ''
    post:
      summary: Process
      tags: []
      responses:
        '200':
          description: 200 OK is returned after the image has successfully been processed through the ML models.
          content:
            application/json:
              schema:
                type: object
                required:
                  - NextProcessIntervalSec
                  - 'PrintQuality '
                  - WarningSuggested
                  - PauseSuggested
                  - Score
                properties:
                  NextProcessIntervalSec:
                    type: integer
                    x-stoplight:
                      id: tmnvhgqzy73gi
                    minimum: 20
                    example: 40
                    description: '        This indicates minimum amount of time that should elapse from this call before the next Process API call. This value is dynamic based on our server load; it averages around 40 seconds. Your integration is free to choose a longer time if desired.'
                  'PrintQuality ':
                    type: integer
                    x-stoplight:
                      id: 8h7eesnu63gn3
                    minimum: 1
                    maximum: 10
                    example: 2
                    description: "        This is the temporal combination model print quality score. The print score rates your current print out of 10, where 10 is perfect.\r\n        This value is used for showing the user the current print quality.\r\n        The values can be interrupted as:\r\n        1. There's a print failure\r\n        2. There's probably a print failure\r\n        3. There might be a print failure\r\n        4. Monitoring a possible print issue\r\n        5. Monitoring a possible print issue\r\n        6. Good print quality\r\n        7. Good print quality\r\n        8. Great print quality\r\n        9. Great print quality\r\n        10. Perfect print quality"
                  WarningSuggested:
                    type: boolean
                    x-stoplight:
                      id: 3tm8tuefpb7dg
                    default: false
                    description: '        Set to true if the temporal combination model is confident there might be a print issue and the user should be informed. This decision is based on many signals and is only sent when there''s high confidence of the warning state.'
                  PauseSuggested:
                    type: boolean
                    x-stoplight:
                      id: sp2vuq8tyqe3z
                    default: false
                    description: '        Set to true if the temporal combination model is confident that there is probably a print failure and that the print should be paused. This decision is based on many signals and is only sent when there''s high confidence that the print has failed.'
                  Score:
                    type: integer
                    x-stoplight:
                      id: s2ytancr2ybzn
                    example: 5
                    minimum: 0
                    maximum: 100
                    description: '        This is the temporal combination model print raw score. The score ranges from 0-100. 0 indicates a perfect print and 100 indicates a strong probability of a failure. This is a raw score that''s useful if you want to programmatically interrupt the AI score to possibly run smoothing algorithms or such.'
        '400':
          description: "If the API doesn't return a 200, it will return an HTTP error code with a common json error object body.\r\n\r\n**Note that many different HTTP error codes can be returned; they will all contain the json error body described here.**\r\n\r\nThe json body contains `ErrorType` and `ErrorDetails`. `ErrorType` is a well known string that will map to an [Error Type detailed here.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is#errors) The `ErrorDetails` will provide details about the error."
          content:
            application/json:
              schema:
                type: object
                required:
                  - ErrorType
                  - ErrorDetails
                properties:
                  ErrorType:
                    type: string
                    x-stoplight:
                      id: 5vi8e53hdw4ij
                    description: '        A well known [Error Type detailed here.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is#errors)'
                  ErrorDetails:
                    type: string
                    x-stoplight:
                      id: x19b6434q30y1
                    description: '        Details about this specific error.'
      operationId: process
      x-stoplight:
        id: hb9xvo995a4px
      description: "The Process API is where the magic happens. This API must be called with a context created by the [Create Context API.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/kgomtjwkt3dj9-create-context) The API also must include a current jpeg image of the print. Using our ML image models, the Process API will process the new image into the previous context. The temporal combination model will then produce an output based on the past context, current image, and other signals.\r\n\r\nThe usage of this API is tacked as part of our [API pricing.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is#pricing) **All developers get 5000 free calls per month.**\r\n\r\nThe image must be attached as `multipart/form-data` content-type POST request. This is a common request type that is supported by most built-in HTTP libraries in modern languages. For an example, [see our Python SDKs](https://github.com/OctoEverywhere/Gadget-Python-Sdk/blob/861583ed69a696523b3fb3288736572a2e61f504/gadgetsdk/_gadgetinspectionsession.py#L201) usage of the `requests` library. There can only be one \"file\" attached in the multipart data; the name of the image file doesn't matter.\r\n\r\nExamples of `multipart/form-data` requests:\r\n\r\n- Python\r\n    - https://stackoverflow.com/a/12385661\r\n- C#\r\n    - https://stackoverflow.com/a/19983672\r\n- Java\r\n    - https://stackoverflow.com/a/1379002\r\n- Javascript\r\n    - https://stackoverflow.com/a/60629831\r\n- CPP\r\n    - https://stackoverflow.com/a/76069568\r\n\r\n\r\nThe Process API returns an int value `NextProcessIntervalSec` that indicates the minimum amount of time that must elapse before the next Process API call. However, your program can opt to wait longer if desired. Each time you call the Process API, more signals will be gathered by the temporal combination model, which will allow it to gain confidence in the print's state.\r\n\r\nThe current AI results are returned as follows:\r\n\r\n- **PrintQuality** int [1-10]\r\n    - This is the temporal combination model print quality score. \r\n    - The print score rates your current print out of 10, where 10 is perfect.\r\n    - This value is used for showing the user the current print quality.\r\n    - The values can be interrupted as:\r\n        1. There's a print failure\r\n        2. There's probably a print failure\r\n        3. There might be a print failure\r\n        4. Monitoring a possible print issue\r\n        5. Monitoring a possible print issue\r\n        6. Good print quality\r\n        7. Good print quality\r\n        8. Great print quality\r\n        9. Great print quality\r\n        10. Perfect print quality\r\n- **WarningSuggested** boolean\r\n    - Set to true if the temporal combination model is confident there might be a print issue and the user should be informed. This decision is based on many signals and is only sent when there's high confidence of the warning state.\r\n- **PauseSuggested** boolean\r\n     - Set to true if the temporal combination model is confident that there is probably a print failure and that the print should be paused. This decision is based on many signals and is only sent when there's high confidence that the print has failed.\r\n- **Score** int [1-100]\r\n    - This is the temporal combination model raw score. The score ranges from 0-100. 0 indicates a perfect print, and 100 indicates a strong probability of a failure. \r\n    - This is a raw score that's useful if you want to programmatically interrupt the AI score to possibly run smoothing algorithms or such.\r\n\r\n[See this doc for a full AI API overview.](https://octoeverywhere.stoplight.io/docs/octoeverywhere-api-docs/3xadck728cc0t-ai-failure-detection-ap-is)"
      parameters:
        - schema:
            type: string
          in: header
          name: X-API-Key
          description: You OctoEverywhere developer API key.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
        description: 'The image must be attached as `multipart/form-data` content-type POST request. This is a common request type that is supported by most built-in HTTP libraries in modern languages. For an example, [see our Python SDKs](https://github.com/OctoEverywhere/Gadget-Python-Sdk/blob/861583ed69a696523b3fb3288736572a2e61f504/gadgetsdk/_gadgetinspectionsession.py#L201) usage of the `requests` library. There can only be one "file" attached in the multipart data; the name of the image file doesn''t matter.'
components:
  schemas: {}
  securitySchemes: {}
  examples: {}
